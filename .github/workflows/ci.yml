# Copyright (c) Microsoft Corporation.
# Licensed under the MIT license.

# This continuous integration pipeline is triggered anytime a user pushes code to the repo.
# This pipeline builds the Wpf project, runs unit tests, then saves the MSIX build artifact.
name:  Wpf Continuous Integration

# Trigger on every master branch push and pull request
on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:

  build:

    strategy:
      matrix:
        targetplatform: [x64]

    runs-on: windows-latest

    env:
      App_Packages_Directory: PhotoCat2
      Solution_Path: PhotoCat2.sln
      Wpf_Project_Path: PhotoCat2\PhotoCat2.csproj

    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 0 # avoid shallow clone so nbgv can do its work.

    # Use Nerdbank.GitVersioning to set version variables: https://github.com/AArnott/nbgv
    - name: Use Nerdbank.GitVersioning to set version variables
      uses: aarnott/nbgv@v0.3
      with:
        setAllVars: true

    # Install the .NET Core workload
    - name: Install .NET Core
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 3.1.100

    # Add  MsBuild to the PATH: https://github.com/microsoft/setup-msbuild
    - name: Setup MSBuild.exe
      uses: microsoft/setup-msbuild@v1.0.0

    # Restore the application
    - name:  Restore the Wpf application to populate the obj folder
      run: msbuild $env:Solution_Path /t:Restore /p:Configuration=$env:Configuration /p:RuntimeIdentifier=$env:RuntimeIdentifier
      env:
        Configuration: Release
        RuntimeIdentifier: win-${{ matrix.targetplatform }}

    - name: Restore NuGet packages
      uses: warrenbuckley/Setup-Nuget@v1

    - run: nuget restore ${{ env.Wpf_Project_Path }} -PackagesDirectory packages

    - uses: warrenbuckley/Setup-MSBuild@v1

    - run: msbuild ${{ env.Wpf_Project_Path }} -p:Configuration=Release

    - name: Upload build artifacts
      uses: actions/upload-artifact@v1
      with:
        name: PhotoCat2ReleaseBinary
        path: ${{ env.App_Packages_Directory }}\bin\Release

  release:
    if: github.event_name == 'create' && github.event.ref_type == 'tag'
    name: Create and publish bianry
    needs: build
    runs-on: ubuntu-latest
    steps:
    - name: Download artifacts
      uses: actions/download-artifact@v1
      with: 
        name: PhotoCat2ReleaseBinary
    - name: Create release zip archive
      uses: montudor/action-zip@v0.1.0
      with:
        args: zip -qq -r PhotoCat-Release_${{ github.sha }}.zip PhotoCat2ReleaseBinary
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: true
    - name: Upload Release Asset
      id: upload-release-asset 
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
        asset_path: ./PhotoCat-Release_${{ github.sha }}.zip
        asset_name: PhotoCat-Release_${{ github.sha }}.zip
        asset_content_type: application/zip
